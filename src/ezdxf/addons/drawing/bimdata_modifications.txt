Fichier regroupant les différences entre la branch Master de ezdxf et notre fork 


███████╗██████╗  ██████╗ ███╗   ██╗████████╗███████╗███╗   ██╗██████╗ 
██╔════╝██╔══██╗██╔═══██╗████╗  ██║╚══██╔══╝██╔════╝████╗  ██║██╔══██╗
█████╗  ██████╔╝██║   ██║██╔██╗ ██║   ██║   █████╗  ██╔██╗ ██║██║  ██║
██╔══╝  ██╔══██╗██║   ██║██║╚██╗██║   ██║   ██╔══╝  ██║╚██╗██║██║  ██║
██║     ██║  ██║╚██████╔╝██║ ╚████║   ██║   ███████╗██║ ╚████║██████╔╝
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═══╝╚═════╝ 

- scr/ezdxf/addons/drawing/frontend.py :

    - import de librairies supplémentaires : ces dernière sont précédées du commentaire "# For BIMData use"

    - Ajout de la méthode UniversalFrontend.skip_entities_bimdata()

    - Modification la méthode UniversalFrontend._build_dispatch_table() :
        - remplacement de la valeur de POINT par self.skip_entities_bimdata
        - remplacement de la valeur de MTEXT par self.skip_entities_bimdata
        - remplacement de la valeur de IMAGE par self.skip_entities_bimdata
        - remplacement de la méthode utilisé pour les ("TEXT", "ATTRIB", "ATTDEF") par self.skip_entities_bimdata

    - Modification de la methode UniversalFrontend.draw_layout() :
        - Rajout d'une ligne pour récupérer la linear_precision despuis le header du fichier DWG

    - Gestion d'exeption dans la méthode UniversalFrontend.draw_entity() :
        - skip la conversion de l'entité en cours si une exeption de type TypeError est levée

    - Gestion d'exeption dans la méthode UniversalFrontend.draw_line_entity():
        - Récupération / calcul de la variable line_prec
        - skip la conversion si les coordonnées de la ligne sont trop petite

    - Gestion d'erreur dans UniversalFrontend.draw_curve_entity():
        - cf bugfix_175 : https://bimdata.backlog.com/view/BUFIXMANAGMENT-175
        - Gestion des exeption de type ZeroDivisionError

    - Gestion d'erreur dans la méthode UniversalFrontend.draw_composite_entity()
        - cf bugfix 219 : https://bimdata.backlog.com/view/BUFIXMANAGMENT-219

    - Gestion d'erreur dans la méthode _draw_entities():
        - gestion des exeptions de type ZeroDivisionError


███╗   ███╗ █████╗ ████████╗██████╗ ██╗      ██████╗ ████████╗██╗     ██╗██████╗ 
████╗ ████║██╔══██╗╚══██╔══╝██╔══██╗██║     ██╔═══██╗╚══██╔══╝██║     ██║██╔══██╗
██╔████╔██║███████║   ██║   ██████╔╝██║     ██║   ██║   ██║   ██║     ██║██████╔╝
██║╚██╔╝██║██╔══██║   ██║   ██╔═══╝ ██║     ██║   ██║   ██║   ██║     ██║██╔══██╗
██║ ╚═╝ ██║██║  ██║   ██║   ██║     ███████╗╚██████╔╝   ██║   ███████╗██║██████╔╝
╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝     ╚══════╝ ╚═════╝    ╚═╝   ╚══════╝╚═╝╚═════╝ 
                                                                                 
- src/ezdxf/addons/drawing/frontend.py :

    - Rajout de l'output_id dans la méthode MatplotlibBackend.draw_point() 
    - Rajout de l'output_id dans la méthode MatplotlibBackend.draw_line()
    - Modification de la méthode MatplotlibBackend.draw_solid_lines():
        - Mise en commentaire de la ligne self.ax.scatter(point_x, point_y, s=SCATTER_POINT_SIZE, c=color, zorder=z)
        - Rajout de l'output_id
    - Modification de la méthode MatplotlibBackend.draw_path():
        - Rajout de l'output_id
        - Rajout du hatch_type 
    - Rajout de l'output_id dans la méthode MatplotlibBackend.draw_filled_paths()
    - Rajout de l'output_id dans la méthode MatplotlibBackend.draw_filled_polygon()

    - Modification de la méthode qsave :
        - Rajout de l'input margin=True dans la méthode qsave()
        - Rajout de la gestion des marge si non définie dans l'input


██████╗ ██████╗  ██████╗ ██████╗ ███████╗██████╗ ████████╗██╗███████╗███████╗
██╔══██╗██╔══██╗██╔═══██╗██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██║██╔════╝██╔════╝
██████╔╝██████╔╝██║   ██║██████╔╝█████╗  ██████╔╝   ██║   ██║█████╗  ███████╗
██╔═══╝ ██╔══██╗██║   ██║██╔═══╝ ██╔══╝  ██╔══██╗   ██║   ██║██╔══╝  ╚════██║
██║     ██║  ██║╚██████╔╝██║     ███████╗██║  ██║   ██║   ██║███████╗███████║
╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝   ╚═╝╚══════╝╚══════╝
                                                                             

- src/ezdxf/addons/drawing/properties.py :
    
    - ajout de la méthode get_gid, permettant de récupérer la handle d'un element DWG pour le reporter sur sa conversion SVG
    - Ajout de la variable output_id dans la classe BackendProperties()
    - Ajout de la variable output_id dans la méthode RenderContext.resolve_all()



██████╗ ██╗██████╗ ███████╗██╗     ██╗███╗   ██╗███████╗
██╔══██╗██║██╔══██╗██╔════╝██║     ██║████╗  ██║██╔════╝
██████╔╝██║██████╔╝█████╗  ██║     ██║██╔██╗ ██║█████╗  
██╔═══╝ ██║██╔═══╝ ██╔══╝  ██║     ██║██║╚██╗██║██╔══╝  
██║     ██║██║     ███████╗███████╗██║██║ ╚████║███████╗
╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝

- src/ezdxf/addons/drawing/pipeline.py :
    
    - Ajout de l'output "output_id" dans la méthode RenderPipeline2d.get_backend_properties()
                                                        


 █████╗ ██╗   ██╗████████╗██████╗ ███████╗        ██╗    ███╗   ██╗ ██████╗ ████████╗███████╗███████╗
██╔══██╗██║   ██║╚══██╔══╝██╔══██╗██╔════╝       ██╔╝    ████╗  ██║██╔═══██╗╚══██╔══╝██╔════╝██╔════╝
███████║██║   ██║   ██║   ██████╔╝█████╗        ██╔╝     ██╔██╗ ██║██║   ██║   ██║   █████╗  ███████╗
██╔══██║██║   ██║   ██║   ██╔══██╗██╔══╝       ██╔╝      ██║╚██╗██║██║   ██║   ██║   ██╔══╝  ╚════██║
██║  ██║╚██████╔╝   ██║   ██║  ██║███████╗    ██╔╝       ██║ ╚████║╚██████╔╝   ██║   ███████╗███████║
╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝    ╚═╝        ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚══════╝╚══════╝
                                                                                                     
- On retrouve dans les propriétés des objects (dans le process de addons.drawing) une variable "handle" : serait-il possible de l'utiliser pour être davantage proche du code source de ezdxf ? 






